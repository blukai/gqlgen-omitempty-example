// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gen

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	GetMoon         *Moon                  "json:\"getMoon\" graphql:\"getMoon\""
	QueryMoon       []*Moon                "json:\"queryMoon\" graphql:\"queryMoon\""
	AggregateMoon   *MoonAggregateResult   "json:\"aggregateMoon\" graphql:\"aggregateMoon\""
	GetPlanet       *Planet                "json:\"getPlanet\" graphql:\"getPlanet\""
	QueryPlanet     []*Planet              "json:\"queryPlanet\" graphql:\"queryPlanet\""
	AggregatePlanet *PlanetAggregateResult "json:\"aggregatePlanet\" graphql:\"aggregatePlanet\""
}
type Mutation struct {
	AddMoon      *AddMoonPayload      "json:\"addMoon\" graphql:\"addMoon\""
	UpdateMoon   *UpdateMoonPayload   "json:\"updateMoon\" graphql:\"updateMoon\""
	DeleteMoon   *DeleteMoonPayload   "json:\"deleteMoon\" graphql:\"deleteMoon\""
	AddPlanet    *AddPlanetPayload    "json:\"addPlanet\" graphql:\"addPlanet\""
	UpdatePlanet *UpdatePlanetPayload "json:\"updatePlanet\" graphql:\"updatePlanet\""
	DeletePlanet *DeletePlanetPayload "json:\"deletePlanet\" graphql:\"deletePlanet\""
}
type PlanetFragment struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Moons []*struct {
		ID   string "json:\"id\" graphql:\"id\""
		Name string "json:\"name\" graphql:\"name\""
	} "json:\"moons\" graphql:\"moons\""
}
type AddPlanet struct {
	AddPlanet *struct {
		Planet []*PlanetFragment "json:\"planet\" graphql:\"planet\""
	} "json:\"addPlanet\" graphql:\"addPlanet\""
}
type UpdatePlanet struct {
	UpdatePlanet *struct {
		Planet []*PlanetFragment "json:\"planet\" graphql:\"planet\""
	} "json:\"updatePlanet\" graphql:\"updatePlanet\""
}
type QueryPlanet struct {
	QueryPlanet []*PlanetFragment "json:\"queryPlanet\" graphql:\"queryPlanet\""
}

const AddPlanetDocument = `mutation AddPlanet ($input: [AddPlanetInput!]!) {
	addPlanet(input: $input) {
		planet {
			... PlanetFragment
		}
	}
}
fragment PlanetFragment on Planet {
	id
	name
	moons {
		id
		name
	}
}
`

func (c *Client) AddPlanet(ctx context.Context, input []*AddPlanetInput, httpRequestOptions ...client.HTTPRequestOption) (*AddPlanet, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AddPlanet
	if err := c.Client.Post(ctx, "AddPlanet", AddPlanetDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdatePlanetDocument = `mutation UpdatePlanet ($input: UpdatePlanetInput!) {
	updatePlanet(input: $input) {
		planet {
			... PlanetFragment
		}
	}
}
fragment PlanetFragment on Planet {
	id
	name
	moons {
		id
		name
	}
}
`

func (c *Client) UpdatePlanet(ctx context.Context, input UpdatePlanetInput, httpRequestOptions ...client.HTTPRequestOption) (*UpdatePlanet, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res UpdatePlanet
	if err := c.Client.Post(ctx, "UpdatePlanet", UpdatePlanetDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const QueryPlanetDocument = `query QueryPlanet {
	queryPlanet {
		... PlanetFragment
	}
}
fragment PlanetFragment on Planet {
	id
	name
	moons {
		id
		name
	}
}
`

func (c *Client) QueryPlanet(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*QueryPlanet, error) {
	vars := map[string]interface{}{}

	var res QueryPlanet
	if err := c.Client.Post(ctx, "QueryPlanet", QueryPlanetDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
